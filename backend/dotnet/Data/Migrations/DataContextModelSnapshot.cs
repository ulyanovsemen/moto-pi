// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Fio")
                        .HasColumnType("text")
                        .HasColumnName("fio");

                    b.Property<string>("TelNumber")
                        .HasColumnType("text")
                        .HasColumnName("tel_number");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Fio")
                        .HasColumnType("text")
                        .HasColumnName("fio");

                    b.Property<string>("TelNumber")
                        .HasColumnType("text")
                        .HasColumnName("tel_number");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Manufacturer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.HasKey("Id")
                        .HasName("pk_manufacturers");

                    b.ToTable("manufacturers", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("change_date");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.Property<string>("Vin")
                        .HasColumnType("text")
                        .HasColumnName("vin");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_orders_customer_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_orders_vehicle_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Data.Entities.OrderWork", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<long>("WorkId")
                        .HasColumnType("bigint")
                        .HasColumnName("work_id");

                    b.HasKey("Id")
                        .HasName("pk_order_works");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_order_works_employee_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_works_order_id");

                    b.HasIndex("WorkId")
                        .HasDatabaseName("ix_order_works_work_id");

                    b.ToTable("order_works", (string)null);
                });

            modelBuilder.Entity("Data.Entities.OrderWorkPart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<long>("OrderWorkId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_work_id");

                    b.Property<long>("PartId")
                        .HasColumnType("bigint")
                        .HasColumnName("part_id");

                    b.HasKey("Id")
                        .HasName("pk_order_work_parts");

                    b.HasIndex("OrderWorkId")
                        .HasDatabaseName("ix_order_work_parts_order_work_id");

                    b.HasIndex("PartId")
                        .HasDatabaseName("ix_order_work_parts_part_id");

                    b.ToTable("order_work_parts", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Part", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<long>("PartModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("part_model_id");

                    b.Property<long>("PartTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("part_type_id");

                    b.HasKey("Id")
                        .HasName("pk_parts");

                    b.HasIndex("PartModelId")
                        .HasDatabaseName("ix_parts_part_model_id");

                    b.HasIndex("PartTypeId")
                        .HasDatabaseName("ix_parts_part_type_id");

                    b.ToTable("parts", (string)null);
                });

            modelBuilder.Entity("Data.Entities.PartModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ManufacturerId")
                        .HasColumnType("bigint")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.HasKey("Id")
                        .HasName("pk_part_models");

                    b.HasIndex("ManufacturerId")
                        .HasDatabaseName("ix_part_models_manufacturer_id");

                    b.ToTable("part_models", (string)null);
                });

            modelBuilder.Entity("Data.Entities.PartType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.HasKey("Id")
                        .HasName("pk_part_types");

                    b.ToTable("part_types", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("VehicleModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_model_id");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.HasIndex("VehicleModelId")
                        .HasDatabaseName("ix_vehicles_vehicle_model_id");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("Data.Entities.VehicleModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ManufacturerId")
                        .HasColumnType("bigint")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_models");

                    b.HasIndex("ManufacturerId")
                        .HasDatabaseName("ix_vehicle_models_manufacturer_id");

                    b.ToTable("vehicle_models", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Work", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<long>("WorkTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("work_type_id");

                    b.HasKey("Id")
                        .HasName("pk_works");

                    b.HasIndex("WorkTypeId")
                        .HasDatabaseName("ix_works_work_type_id");

                    b.ToTable("works", (string)null);
                });

            modelBuilder.Entity("Data.Entities.WorkType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.HasKey("Id")
                        .HasName("pk_work_types");

                    b.ToTable("work_types", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.HasOne("Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_customers_customer_id");

                    b.HasOne("Data.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_vehicles_vehicle_id");

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Data.Entities.OrderWork", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_works_employees_employee_id");

                    b.HasOne("Data.Entities.Order", null)
                        .WithMany("Works")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_works_orders_order_id");

                    b.HasOne("Data.Entities.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_works_works_work_id");

                    b.Navigation("Employee");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Data.Entities.OrderWorkPart", b =>
                {
                    b.HasOne("Data.Entities.OrderWork", null)
                        .WithMany("Parts")
                        .HasForeignKey("OrderWorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_work_parts_order_works_order_work_id");

                    b.HasOne("Data.Entities.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_work_parts_parts_part_id");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("Data.Entities.Part", b =>
                {
                    b.HasOne("Data.Entities.PartModel", "Model")
                        .WithMany()
                        .HasForeignKey("PartModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_parts_part_models_part_model_id");

                    b.HasOne("Data.Entities.PartType", "Type")
                        .WithMany()
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_parts_part_types_part_type_id");

                    b.Navigation("Model");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Data.Entities.PartModel", b =>
                {
                    b.HasOne("Data.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_part_models_manufacturers_manufacturer_id");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Data.Entities.Vehicle", b =>
                {
                    b.HasOne("Data.Entities.VehicleModel", "Model")
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_vehicle_models_vehicle_model_id");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Data.Entities.VehicleModel", b =>
                {
                    b.HasOne("Data.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_models_manufacturers_manufacturer_id");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Data.Entities.Work", b =>
                {
                    b.HasOne("Data.Entities.WorkType", "Type")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_works_work_types_work_type_id");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("Data.Entities.OrderWork", b =>
                {
                    b.Navigation("Parts");
                });
#pragma warning restore 612, 618
        }
    }
}
